// Font-size
@mixin font-size($number) {
	// font-size: #{ $number * $base + 'px'};
	font-size: #{ $number + 'rem'};
}

// Line-height
@mixin line-height($number) {
	// line-height: #{ $number * $leading + 'px'};
	line-height: #{ $number * $leading-rem + 'rem'};
}

// Margin-top
@mixin margin-top($number) {
	// margin-top: #{ $number * $leading + 'px'};
	margin-top: #{ $number * $leading-rem + 'rem'};
}

// Margin-bottom
@mixin margin-bottom($number) {
	// margin-bottom: #{ $number * $leading + 'px'};
	margin-bottom: #{ $number * $leading-rem + 'rem'};
}

// Margin
@mixin margin($top, $right, $bottom:null, $left:null) {
	@if $left == null and $bottom == null {
		// margin: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'};
		margin: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'};
	} @else if $left == null or $left == $right {
		// margin: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'};
		margin: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'};
	} @else {
		// margin: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'} #{ $left * $leading + 'px'};
		margin: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'} #{ $left * $leading-rem + 'rem'};
	}
}

// padding
@mixin padding($top, $right, $bottom:null, $left:null) {
	@if $left == null and $bottom == null {
		// padding: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'};
		padding: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'};
	} @else if $left == null or $left == $right {
		// padding: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'};
		padding: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'};
	} @else {
		// padding: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'} #{ $left * $leading + 'px'};
		padding: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'} #{ $left * $leading-rem + 'rem'};
	}
}

@mixin padding-equal($number) {
	padding: #{ $number * $leading + 'px'};
	padding: #{ $number * $leading-rem + 'rem'};
}

// Fonts
$font-body: 'Rubik', Helvetica, sans-serif;
$font-headings: 'Playfair Display', Helvetica, Sans-serif;
$font-code: monospace;

// Base sizes
$base-font-size: 100 !default; // In %. Also used for mobile. Number only, no units.
$base-font-size-desktop: 112.5 !default; // In %. Used to calculate the desktop font size. Number only, no units.
$line-height: 1.625 !default;
$line-height-desktop: 1.7 !default;
$max-width: 35 !default; // Number only, no units. Gets converted to REMs and pixels.

$headings: (
	h1: (2.5, 2, 4, 1),
	h2: (1.6875, 1.5, 2.5, .5),
	h3: (1.375, 1, 2, .5),
	h4: (1.2, 1, 1.5, .5),
	h5: (1, 1, 2.5, .5),
	h6: (1, 1, 2.5, .5)
) !default;

/* Calculations */

// Mobile base & leading
$base: 16 * ($base-font-size / 100);
$leading: round($base * $line-height);
$leading-rem: $leading / $base;

// Desktop base & leading
$base-desktop: 18 * ($base-font-size-desktop / 100);
$leading-desktop: round($base-desktop * $line-height-desktop);
$leading-rem-desktop: $leading-desktop / $base-desktop;
